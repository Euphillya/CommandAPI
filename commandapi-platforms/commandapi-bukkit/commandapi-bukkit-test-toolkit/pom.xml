<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>dev.jorel</groupId>
		<artifactId>commandapi-bukkit</artifactId>
		<version>9.6.0-SNAPSHOT</version>
	</parent>

	<artifactId>commandapi-bukkit-test-toolkit</artifactId>

	<properties>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<repositories>
		<repository>
			<id>minecraft-libraries</id>
			<name>Minecraft Libraries</name>
			<url>https://libraries.minecraft.net</url>
		</repository>
		<repository>
			<id>papermc</id>
			<url>https://repo.papermc.io/repository/maven-public/</url>
		</repository>
	</repositories>

	<dependencies>
		<!-- Compatibility with MockBukkit API -->
		<dependency>
			<groupId>com.github.seeseemelk</groupId>
			<artifactId>MockBukkit-v1.20</artifactId>
			<version>3.9.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Compatibility with Spigot API-->
		<dependency>
			<groupId>org.spigotmc</groupId>
			<artifactId>spigot-api</artifactId>
			<version>1.20.6-R0.1-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>

		<!-- Compatibility with Adventure API -->
		<dependency>
			<groupId>net.kyori</groupId>
			<artifactId>adventure-platform-bukkit</artifactId>
			<version>4.2.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Compatibility with CommandAPI Bukkit API -->
		<dependency>
			<groupId>dev.jorel</groupId>
			<artifactId>commandapi-bukkit-core</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Compatibility with JUnit API -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.8.2</version>
			<scope>provided</scope>
		</dependency>

		<!-- Pass Brigadier to our dependents -->
		<dependency>
			<groupId>com.mojang</groupId>
			<artifactId>brigadier</artifactId>
			<version>1.0.18</version>
			<scope>compile</scope>
		</dependency>

		<!-- Passing this to dependents gets rid of a `SLF4J: No SLF4J providers were found` warning -->
		<!-- https://stackoverflow.com/questions/54652836/found-slf4j-api-dependency-but-no-providers-were-found -->
		<!-- This version matches the slf4j-api declared by MockBukkit-1.20 (not sure if other versions are needed) -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.8.0-beta4</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Fill ${project.version} in plugin.yml -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<!-- Remove commandapi-core's VersionHandler in favor of ours -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<filters>
								<filter>
									<artifact>dev.jorel:commandapi-core</artifact>
									<excludes>
										<exclude>dev/jorel/commandapi/CommandAPIVersionHandler**</exclude>
									</excludes>
								</filter>
							</filters>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>LICENSE</resource>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Run our own tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<trimStackTrace>false</trimStackTrace>
					<!-- To help with debugging tests, you can specify an include
					 to limit a build to only run a certain test file. Uncomment
					 here if you want to do that: -->
<!--					<includes>-->
<!--						<include>**/DispatchCommandUtilitiesTests.java</include>-->
<!--					</includes>-->
				</configuration>
			</plugin>

			<!-- Run code coverage report -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<!-- to avoid bugs in some situations -->
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- create report during maven verify phase -->
					<execution>
						<id>report</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>